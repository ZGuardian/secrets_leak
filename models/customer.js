// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Customer = sequelize.define('customer', {
    customerId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      defaultValue: Sequelize.literal('nextval(\'customer_customer_id_seq\'::regclass)'),
      allowNull: false,
    },
    storeId: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
    },
    activebool: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
      allowNull: false,
    },
    createDate: {
      type: DataTypes.DATEONLY,
      defaultValue: Sequelize.literal('(\'now\'::text)::date'),
      allowNull: false,
    },
    lastUpdate: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    active: {
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: 'customer',
    underscored: true,
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Customer.associate = (models) => {
    Customer.belongsTo(models.address, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      targetKey: 'addressId',
      as: 'address',
    });
    Customer.hasMany(models.rental, {
      foreignKey: {
        name: 'customerIdKey',
        field: 'customer_id',
      },
      sourceKey: 'customerId',
      as: 'rentals',
    });
    Customer.hasMany(models.payment, {
      foreignKey: {
        name: 'customerIdKey',
        field: 'customer_id',
      },
      sourceKey: 'customerId',
      as: 'payments',
    });
  };

  return Customer;
};
