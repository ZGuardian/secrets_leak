// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Address = sequelize.define('address', {
    addressId: {
      type: DataTypes.INTEGER,
      field: 'address_id',
      primaryKey: true,
      defaultValue: Sequelize.literal('nextval(\'address_address_id_seq\'::regclass)'),
      allowNull: false,
    },
    address: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    address2: {
      type: DataTypes.STRING,
    },
    district: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    postalCode: {
      type: DataTypes.STRING,
      field: 'postal_code',
    },
    phone: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastUpdate: {
      type: DataTypes.DATE,
      field: 'last_update',
      defaultValue: Sequelize.literal('now()'),
      allowNull: false,
    },
  }, {
    tableName: 'address',
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Address.associate = (models) => {
    Address.belongsTo(models.city, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      targetKey: 'cityId',
      as: 'city',
    });
    Address.hasMany(models.store, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      sourceKey: 'addressId',
      as: 'stores',
    });
    Address.hasMany(models.customer, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      sourceKey: 'addressId',
      as: 'customers',
    });
    Address.hasMany(models.staff, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      sourceKey: 'addressId',
      as: 'staff',
    });
  };

  return Address;
};
